import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.net.*;
import java.io.*;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.io.IOException;
import java.sql.*;
import java.util.*;
import java.text.*;
import jahuwaldt.plot.EquiPlotWindow;

public class RelaxSim100 extends JFrame 
   implements ActionListener, MenuListener
{
    static int V1str = 0;
    static int V2str = 0;    
    static int xSep = 0;        
    static int ySep = 0;    
    static int XSpace = xSep;
    static int YSpace = ySep;
    static int V1 = V1str;
    static int V2 = V2str;
    static int XSize = 22 + (XSpace % 2);
    static int XA = (int) ((XSize-XSpace)/2);
    static int XB = XA + XSpace;

    static final int ROWS = 99;
    static final int COLS = 99;
    static int changes = 0;
    static  String displayMsg = "Finite Difference Method";
    static double grid[][] = new double[ROWS][COLS];
    static double centergrid[][] = new double[31][31];

    static int no_lines = 0;

//Initialize the Array
static public void setGrid(int setVal, int rows, int cols) {
 for(int i = 0 ; i < rows; i++ )     {
	 for(int j = 0 ; j < cols; j++ ) 	    {
        	grid[i][j] = setVal;
	    }
    }
}

//Set the Boundaries
static public void setBounds(int YSpace, int XSpace, int XSize, int XA, int XB, int V1, int V2)
{
 int K = 0;
 double Poten;
// Set the values of the electrodes
 for(int ix = 0 ; ix < 10; ix++ )
    {     //   	grid[0][ix] = V1;
        //	grid[0][ix +XB] = V2;		
        	grid[50][35+ix] = V1;
        	grid[50][ix +55] = V2;				
    }
// Set the values of the sides 
//  for(int iy = 0 ; iy <= YSpace; iy++ )
  //  {        	grid[iy][0] = V1;
    //    	grid[iy][XSize] = V2;		
   // }
// Set the values between the electrodes
   for(int ix = 0 ; ix <= 9; ix++ )
    {	    	K = ix + 45;
		Poten = (double)V1-((((double)V1-(double)V2) * (double)ix)/(double)10);
        	grid[50][K] = Poten;
//        	grid[YSpace][K] = Poten;
	//	System.out.println("grid[0][" +K+"] = " + Poten + " Round " + Math.round(Poten));
    }
}



//Print the Grid
static public String printGrid(int ROWS, int COLS)
{
String output = "Screen Display.\n";   // Accumulate text here (should be StringBuilder).
//... Print array in rectangular form using nested for loops.
	int a = 0, b =0;
        for (int row = 35; row <= 65; row++) {
            for (int col = 35; col <= 65; col++) {
            output += " " + String.format("%02d", (int)Math.round(grid[row][col]));		
	    centergrid[a][b] = grid[row][col];
	    b++;
            }
	    b = 0;
	    a++;
            output += "\n"; // New Line
        }
        output += "\n End of Display";
	return output; 
}

   public RelaxSim100() 
   {
	   /** Basic window stuff: name, size	    * a	    */
	  //Util.debugOff();
	  setTitle("Numerical Simulation of Equipotentials");
	  setSize(400, 500);
	  Window owner = getOwner();
	  Toolkit tk = Toolkit.getDefaultToolkit();
	  Dimension screenSize = tk.getScreenSize();
	  
      setLocation(((screenSize.width - getSize().width)/2),
				  ((screenSize.height - getSize().height)/2));
      /** Need this to close the window       */
      addWindowListener(new WindowAdapter()
      {  public void windowClosing(WindowEvent e)
         {  System.exit(0);
         }
      } );
	  
	  /** Set up Menu 	   */
	  menuBar = new JMenuBar();
	  setJMenuBar(menuBar);

	  helpMenu = new JMenu("Help");
	  helpMenu.addMenuListener(this);
	  
	    
	  graphGrid = new JMenuItem("Graph Grid");
	  graphGrid.setAccelerator (KeyStroke.getKeyStroke(KeyEvent.VK_G, InputEvent.CTRL_MASK));
	  aboutItem = new JMenuItem("About");
	  aboutItem.setAccelerator (KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_MASK));

	  readmeItem = new JMenuItem("Read Me");
	  readmeItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, InputEvent.CTRL_MASK));
	  
	  menuBar.add(makeMenu(helpMenu, new Object[]{ aboutItem, readmeItem, graphGrid }, this));

	  /** End menu set-up   */
	  JPanel umConnectPanel = new JPanel();
	  umConnectPanel.setLayout(new GridLayout(4, 2));
	  umConnectPanel.setBorder(BorderFactory.createTitledBorder( BorderFactory.createEtchedBorder(), "Configuration"));

	  leftLabel = new JLabel();
	  leftLabel.setText("Left Potential (e.g. 0):");
	  umConnectPanel.add(leftLabel);
	  
	  leftField = new JTextField();
	  leftField.setText("");
	  umConnectPanel.add(leftField);

	  rightLabel = new JLabel();
	  rightLabel.setText("Right Potential (e.g. 99):");
	  umConnectPanel.add(rightLabel);
	  
	  rightField = new JTextField();
	  rightField.setText("");
	  umConnectPanel.add(rightField);

	  XsepLabel = new JLabel();
	  XsepLabel.setText("X - Separation (MAX=15):");
	  umConnectPanel.add(XsepLabel);

 	  XsepField = new JTextField();
	  XsepField.setText("");
	  umConnectPanel.add(XsepField);

//	  YsepLabel = new JLabel();
//	  YsepLabel.setText("Y - Separation (MAX=13):");
//	  umConnectPanel.add(YsepLabel);	  
	  
//	  YsepField = new JTextField();
//	  YsepField.setText("");
//	  umConnectPanel.add(YsepField);

	  initBtn = new JButton("Initalize");
	  initBtn.setEnabled(true);
	  initBtn.addActionListener(this);
	  umConnectPanel.add(initBtn);
	  
	  
	  runSimBtn = new JButton("Run Relaxation Algorithm"); 
	  runSimBtn.setEnabled(false);
	  runSimBtn.addActionListener(this);
	  umConnectPanel.add(runSimBtn);

	    
	  resultsTextArea = new JTextArea();
	  JScrollPane resultsPanel = new JScrollPane(resultsTextArea);
	  /* send req panel*/

	 JPanel graphPanel = new JPanel();
	  graphPanel.setBorder(BorderFactory.createTitledBorder(
											BorderFactory.createEtchedBorder(),
		"Graph Panel"));
      graphPanel.setLayout(new GridLayout(2, 2));
	  ButtonGroup directionGroup = new ButtonGroup();


	  linesLabel = new JLabel();
	  linesLabel.setText("Lines to Plot (11):");
	  graphPanel.add(linesLabel);	  
	  
	  linesField = new JTextField();
	  linesField.setText("11");
	  graphPanel.add(linesField);
	 
	  
	  graphBtn = new JButton("Plot Graph");
	  graphBtn.addActionListener(this);
	  graphBtn.setEnabled(false);
	  graphPanel.add(graphBtn);

      
          Container contentPane = getContentPane();
	  contentPane.add(resultsPanel, "Center");
	  contentPane.add(umConnectPanel, "North");
	  contentPane.add(graphPanel, "South");

   }

   public JRadioButton addRadioButton(JPanel p, ButtonGroup g, String name, boolean selected)
   {  JRadioButton button          = new JRadioButton(name, selected);
      button.addActionListener(this);
      g.add(button);
      p.add(button);
      return button;
   }

   public JCheckBox addCheckBox(JPanel p, String name)
   {  JCheckBox checkBox = new JCheckBox(name);
      //checkBox.addActionListener(this);
      p.add(checkBox);
      return checkBox;
   }
   
   public void actionPerformed(ActionEvent evt)
   {  

  Object source = evt.getSource();
  if (source == initBtn)
  {  displayLine("Intializing..\n Set Grid\n");	   	   
// 	   setGrid(0, ROWS, COLS); // Initialize Grid to Zero
	   V1str = Integer.parseInt(leftField.getText());
   	   V2str = Integer.parseInt(rightField.getText());	   
	   ySep = Integer.parseInt(YsepField.getText());
	   xSep = Integer.parseInt(XsepField.getText());	   

	   XSpace = ySep; //they are getting mixed up
	   YSpace = xSep;
	   
	   V1 = V1str;
	   V2 = V2str;
	   
	   int diff = (int)(Math.abs(V1)-Math.abs(V2))/2;
 	   setGrid(diff, ROWS, COLS); // Initialize Grid to Zero
	   XSize = 22 + (XSpace % 2);
	   XA = (int) ((XSize-XSpace)/2);
     	   XB = XA + XSpace;
	   displayLine("Intializing..\n Set Boundaries\n");	   	   
	   displayMsg += "ySep= " + ySep + " xSep= " +xSep + " V1= " + V1 + " V2= " +V2 +"\n";
           setBounds(YSpace, XSpace, XSize, XA, XB, V1, V2);
   	   displayMsg +=printGrid(YSpace, XSize);	  
	   displayMessage(displayMsg);
   	  runSimBtn.setEnabled(true);
	  
  }
  else if (source == runSimBtn)
	  {
   	  /* V1str = Integer.parseInt(leftField.getText());
   	   V2str = Integer.parseInt(rightField.getText());	   
	   ySep = Integer.parseInt(YsepField.getText());
	   xSep = Integer.parseInt(XsepField.getText());*/
//	   setGrid(0);

           System.out.println("Relaxation Algorithm...Starting.../n");

	   // Get Input
  /*         Console console = System.console(); //Newer Java Command Line Stuff (Note: gcj / Jikes doesnt like this!)
	   String ySep = console.readLine("Enter the Y-separation of plates in cm (MAX = 15):");
	   String xSep = console.readLine("Enter the X-separation of plates in cm (MAX = 13):");
	   String V1str = console.readLine("Enter the potential on the left hand cylinder :");	   	   
	   String V2str = console.readLine("Enter the potential on the right hand cylinder :");	   
*/

/*	   int XSpace = xSep;
	   int YSpace = ySep;
	   int V1 = V1str;
	   int V2 = V2str;
	   int XSize = 22 + (XSpace % 2);
	   int XA = (int) ((XSize-XSpace)/2);
     	   int XB = XA + XSpace;
           setBounds(YSpace, XSpace, XSize, XA, XB, V1, V2);
   	   displayMsg +=printGrid(YSpace, XSize);
  */         
	   // Relaxation Algorithm now 
	   double Vdiff = Math.abs(V1-V2);
           double Delta = ((Vdiff))/10000.0;
           int IT = 0; // Iteration number 
	   int CH = 0;
	   double NewVal, absNewVal;
	   int ix, iy;

//           String keyPress = console.readLine("Press the ENTER key to perform one iteration, or X to end");
  // 	   if (keyPress == "X")
//		   CH = 0;

           do
	   {
           System.out.println("Iteration = " + IT + " changes " + CH);
           CH = 0; // Number of changes 
           IT++;
	   //Note differences between Java & Modula-2/Pascal Arrays! CG 19/08/1999
           for (ix = 1;  ix < 98; ix++)
	   {
                for (iy = 1; iy < 98; iy++)
		{
                     NewVal = (grid[ix-1][iy] + grid[ix+1][iy] + grid[ix][iy-1] + grid[ix][iy+1])/4;
		     absNewVal = Math.abs(NewVal);
                     if ((absNewVal-grid[ix][iy]) >= Delta) {
                         CH++;
                         grid[ix][iy] = NewVal;
		     }
	   	}
	   }
	   
           setBounds(YSpace, XSpace, XSize, XA, XB, V1, V2);
   	   displayMsg += printGrid(YSpace, XSize);
           displayMsg +="Iteration = " + IT + " changes " + CH;
//	   keyPress = console.readLine("Press the ENTER key to perform one iteration, or X to end");
//	   if (keyPress == "X")
//		   CH = 0;
	   if (IT > 800)
		   CH = 0;

	   } while( CH != 0);
	  // } while( IT < 2000);

      	   displayMsg += "Iterations converged in " + IT +" cycles";
           displayMsg += "\n End of Relaxation";
	   displayMessage(displayMsg);
           displayMessage(printGrid(YSpace, XSize) );
	   
	  graphBtn.setEnabled(true);

	  }

	  else if(source == aboutItem)
	  {
		  new AboutRelaxSim(this).show();
	  }
	else if(source == readmeItem)
	  {

		  new ReadMe(this).show();
	  }
 	 else  if (source == graphBtn) 
	{
			 no_lines = Integer.parseInt(linesField.getText());	   

	 if (no_lines < 0 )
	   {
	   	   displayMessage("No of lines too low using 11.");
		   no_lines = 11;
	   }	   

        jahuwaldt.plot.EquiPlotWindow.main(centergrid, no_lines);

	}
	
         else if (source == graphGrid)
	{
	 no_lines = Integer.parseInt(linesField.getText());	   

	 if (no_lines < 0 )
	   {
	   	   displayMessage("No of lines too low using 11.");
		   no_lines = 11;
	   }	   

        jahuwaldt.plot.EquiPlotWindow.main(centergrid, no_lines);

	}


	  else
	  {
		  //  Util.debug("Unrecognised event");
	  }
      repaint();
   }

   public static void main(String[] args)
   {  Frame f = new RelaxSim100();
      f.show();  
   }
   
   
   private void displayMessage(String message)
   {
	  
	  Time time = new Time(System.currentTimeMillis());
	  resultsTextArea.setFont(boldFont);
	  resultsTextArea.append(time.toLocaleString() + ":\r\n\t");
	  resultsTextArea.append(message + "\n");
   }

      private void displayLine(String message)
	   {
	  
	  resultsTextArea.setFont(boldFont);
	  resultsTextArea.append(message + "\n");
	   }


   public void menuSelected(MenuEvent evt)
   {
	   
   }
   public void menuDeselected(MenuEvent evt)
   {
   }
   public void menuCanceled(MenuEvent evt)
   {
   }
   
   public static JMenu makeMenu(Object parent,
								Object[] items,
								Object target)
   {
	   JMenu m = null;
	   if (parent instanceof JMenu)
		   m = (JMenu)parent;
	   else if (parent instanceof String)
		   m = new JMenu((String) parent);
	   else
		   return null;
	   
	   for (int i= 0; i < items.length; i++)
	   {
		   if (items[i] == null)
			   m.addSeparator();
		   else
			   m.add(makeMenuItem(items[i], target));
	   }
	   
	   return m;
   }
   
   public static JMenuItem makeMenuItem(Object item,
										Object target)
   {
	   JMenuItem r = null;
	   if (item instanceof String)
		   r = new JMenuItem((String)item);
	   else if (item instanceof JMenuItem)
		   r = (JMenuItem)item;	   
	   else return null;
	   if (target instanceof ActionListener)
		   r.addActionListener((ActionListener) target);
	   return r;
	   
   }
   private JLabel portLabel;
   private JTextField portField;
   private JLabel leftLabel;
   private JTextField leftField;
   private JLabel rightLabel;
   private JTextField rightField;
   private JLabel YsepLabel;
   private JTextField YsepField;
   private JLabel XsepLabel;
   private JTextField XsepField;

   private JLabel linesLabel;
   private JTextField linesField;   
   
   private JLabel deltaLabel;
   private JTextField deltaField;   
   
   private JLabel addressLabel;
   private JTextField addressField;
   private JButton connectBtn;

   

   private JButton graphBtn;
   private JButton initBtn;
   private JButton runSimBtn;
  
   private JMenuBar menuBar;
   private JMenuItem aboutItem;
   private JMenuItem readmeItem;   
   private JMenuItem graphGrid;   
   private JMenu helpMenu;
   
   private JTextArea resultsTextArea;
   
   
   /** my fonts
    */
   Font boldFont = new Font("SansSerif", Font.BOLD + Font.ITALIC, 14);
   
   
   
}


